/* eslint-disable */
/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of queries in this project and run
 *
 * npm run generate
 *
 * for this file to be re-created
 */

import * as Types from '../../store/apis/types.generated';

import { api } from 'src/store/graphqlBaseApi';
export type GetSecretsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type GetSecretsQuery = { __typename?: 'Query', files: Array<{ __typename?: 'File', id: number, name: string, version?: string, createdAt: any, updatedAt: any }> };

export type GetServerQueryVariables = Types.Exact<{
  id: Types.Scalars['Int'];
}>;


export type GetServerQuery = { __typename?: 'Query', server?: { __typename?: 'Server', id: number, name: string, address: string, user?: string, host?: string, port?: number, sshPasswordSet: boolean, sudoPasswordSet: boolean, keyFileId?: number } };

export type AddServerMutationVariables = Types.Exact<{
  name: Types.Scalars['String'];
  address: Types.Scalars['String'];
  user?: Types.InputMaybe<Types.Scalars['String']>;
  host?: Types.InputMaybe<Types.Scalars['String']>;
  port?: Types.InputMaybe<Types.Scalars['Int']>;
  sshPassword?: Types.InputMaybe<Types.Scalars['String']>;
  sudoPassword?: Types.InputMaybe<Types.Scalars['String']>;
  keyFileId?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type AddServerMutation = { __typename?: 'Mutation', addServer: boolean };

export type UpdateServerMutationVariables = Types.Exact<{
  id: Types.Scalars['Int'];
  name: Types.Scalars['String'];
  address: Types.Scalars['String'];
  user?: Types.InputMaybe<Types.Scalars['String']>;
  host?: Types.InputMaybe<Types.Scalars['String']>;
  port?: Types.InputMaybe<Types.Scalars['Int']>;
  sshPassword?: Types.InputMaybe<Types.Scalars['String']>;
  sudoPassword?: Types.InputMaybe<Types.Scalars['String']>;
  keyFileId?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type UpdateServerMutation = { __typename?: 'Mutation', updateServer: boolean };


export const GetSecretsDocument = `
    query GetSecrets {
  files(type: SECRET) {
    id
    name
    version
    createdAt
    updatedAt
  }
}
    `;
export const GetServerDocument = `
    query GetServer($id: Int!) {
  server(id: $id) {
    id
    name
    address
    user
    host
    port
    sshPasswordSet
    sudoPasswordSet
    keyFileId
  }
}
    `;
export const AddServerDocument = `
    mutation AddServer($name: String!, $address: String!, $user: String, $host: String, $port: Int, $sshPassword: String, $sudoPassword: String, $keyFileId: Int) {
  addServer(
    name: $name
    address: $address
    user: $user
    host: $host
    port: $port
    sshPassword: $sshPassword
    sudoPassword: $sudoPassword
    keyFileId: $keyFileId
  )
}
    `;
export const UpdateServerDocument = `
    mutation UpdateServer($id: Int!, $name: String!, $address: String!, $user: String, $host: String, $port: Int, $sshPassword: String, $sudoPassword: String, $keyFileId: Int) {
  updateServer(
    id: $id
    name: $name
    address: $address
    user: $user
    host: $host
    port: $port
    sshPassword: $sshPassword
    sudoPassword: $sudoPassword
    keyFileId: $keyFileId
  )
}
    `;

const injectedRtkApi = api.injectEndpoints({
  overrideExisting: true,
  endpoints: (build) => ({
    GetSecrets: build.query<GetSecretsQuery, GetSecretsQueryVariables | void>({
      query: (variables) => ({ document: GetSecretsDocument, variables })
    }),
    GetServer: build.query<GetServerQuery, GetServerQueryVariables>({
      query: (variables) => ({ document: GetServerDocument, variables })
    }),
    AddServer: build.mutation<AddServerMutation, AddServerMutationVariables>({
      query: (variables) => ({ document: AddServerDocument, variables })
    }),
    UpdateServer: build.mutation<UpdateServerMutation, UpdateServerMutationVariables>({
      query: (variables) => ({ document: UpdateServerDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useGetSecretsQuery, useLazyGetSecretsQuery, useGetServerQuery, useLazyGetServerQuery, useAddServerMutation, useUpdateServerMutation } = injectedRtkApi;

