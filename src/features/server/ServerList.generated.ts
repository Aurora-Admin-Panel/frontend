/* eslint-disable */
/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of queries in this project and run
 *
 * npm run generate
 *
 * for this file to be re-created
 */

import * as Types from '../../store/apis/types.generated';

import { api } from 'src/store/graphqlBaseApi';
export type GetServersQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type GetServersQuery = { __typename?: 'Query', paginatedServers: { __typename?: 'ServerPaginationWindow', count: number, items: Array<{ __typename?: 'Server', id: number, name: string, portUsed: number, portTotal: number, downloadTotal: any, uploadTotal: any }> } };


export const GetServersDocument = `
    query GetServers($limit: Int, $offset: Int) {
  paginatedServers(limit: $limit, offset: $offset) {
    items {
      id
      name
      portUsed
      portTotal
      downloadTotal
      uploadTotal
    }
    count
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  overrideExisting: true,
  endpoints: (build) => ({
    GetServers: build.query<GetServersQuery, GetServersQueryVariables | void>({
      query: (variables) => ({ document: GetServersDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useGetServersQuery, useLazyGetServersQuery } = injectedRtkApi;

